name: ArgoCD Workflow

on:
  push:
    branches:
      - main
    paths:
      - result/**
      - scripts/**
      - .github/workflows/**

env:
  IMAGE_REPOSITORY: akyldocker25/voting-app-result
  TAG: ${{ github.run_id }}
  GIT_USER: akylgit
  GIT_EMAIL: johns.ak87@gmail.com
  ARGOCD_SERVER: 192.168.56.11:8080
  ARGOCD_APP_NAME: result-app
  ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
  ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_TOKEN }}

      - name: Docker login
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u akyldocker25 --password-stdin

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_REPOSITORY:$TAG -t $IMAGE_REPOSITORY:latest result/

      - name: Push Docker image
        run: |
          docker push $IMAGE_REPOSITORY:$TAG
          docker push $IMAGE_REPOSITORY:latest

  update_k8s:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_TOKEN }}

      - name: Update Kubernetes Manifests
        env:
          IMAGE_REPOSITORY: ${{ env.IMAGE_REPOSITORY }}
          TAG: ${{ env.TAG }}
          GIT_USER: ${{ env.GIT_USER }}
          GIT_EMAIL: ${{ env.GIT_EMAIL }}
        run: bash scripts/updateK8sManifests.sh vote $IMAGE_REPOSITORY $TAG

  deploy_argocd:
    runs-on: ubuntu-latest
    needs: update_k8s
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Sync ArgoCD
        env:
          ARGOCD_SERVER: ${{ env.ARGOCD_SERVER }}
          ARGOCD_APP_NAME: ${{ env.ARGOCD_APP_NAME }}
          ARGOCD_USERNAME: ${{ env.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ env.ARGOCD_PASSWORD }}
        run: |
          # Login to your local ArgoCD
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
          # Sync the existing application
          argocd app sync $ARGOCD_APP_NAME
